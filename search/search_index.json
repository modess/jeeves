{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Settings up continuous integration with Jenkins for your PHP application have been a quite daunting task. It used to consist a lot of XML configuration files and manual configuration in Jenkins web GUI. The other option was going with a hosted service that managed the CI process for you, but since it's a resource intensive process it's always expensive. This project aims to simplify that task and make it available to everyone, disregarding budget. It consists of two parts, a Composer package for generating the files you need in your repository, and a script for installing Jenkins and everything needed on the server. What follows is the documentation from using the Composer package in your application to generate the necessary files Jenkins needs, and then using the installer script on the server/instance that is going to host the Jenkins service. After that there's still some configuration to be done in the web GUI, but this aims to be a step-by-step guide to completing it. Requirements Your application needs to support PHP7 ( 7.0 , 7.1 or 7.2 ) Your application is hosted on Github The server/instance needs to run Linux Ubuntu 14.04 , 16.04 or 18.04 The server/instance should have at least 1GB of RAM Features Run unit tests (PHPUnit) Fast PHP linting in parallel (PHP parallel lint) Code style violations (PHP Code sniffer) Code complexity (PHP mess detector) Duplicate code detection (PHP copy/paste detector) Slack notifications, optional","title":"Introduction"},{"location":"#requirements","text":"Your application needs to support PHP7 ( 7.0 , 7.1 or 7.2 ) Your application is hosted on Github The server/instance needs to run Linux Ubuntu 14.04 , 16.04 or 18.04 The server/instance should have at least 1GB of RAM","title":"Requirements"},{"location":"#features","text":"Run unit tests (PHPUnit) Fast PHP linting in parallel (PHP parallel lint) Code style violations (PHP Code sniffer) Code complexity (PHP mess detector) Duplicate code detection (PHP copy/paste detector) Slack notifications, optional","title":"Features"},{"location":"configure-jenkins/","text":"PATH environment variable Jenkins will need to be able to execute the different tools we install through Composer to run static analysis on your code, we need to tell it where to find these binaries. In the Jenkins web interface click \"Manage Jenkins\" in the left sidebar menu. Then go to \"Configure System\". Here you'll find Global Properties , then click the checkbox next to Environment Variables and click Add . In Name you enter PATH and in Value you enter $PATH:vendor/bin:/var/lib/jenkins/.composer/vendor/bin . Then hit Save . Github authorization Create deploy key For private repositories only This step is not necessary if you will be building a project from a public repository. We'll generate an SSH key for the jenkins user on the server. So in your terminal write the following command and follow the instructions: sudo su - jenkins -c \"ssh-keygen\" Then output the public key and copy it for adding it on Github for your repository: sudo su - jenkins -c \"cat ~/.ssh/id_rsa.pub\" Then head over to Github, specifically to the Deploy keys settings page for your repository which can be access directly with https://github.com/<owner>/<name>/settings/keys . Now click Add deploy key . Enter a title for your key and then paste the public key in the textarea, then click Add key . Add host key verification We need to say we trust Github's domain, since Jenkins can't perform this on its own. sudo su - jenkins -c \"ssh-keyscan -t rsa github.com >> ~/.ssh/known_hosts\" Create access token Working in a team? If you're setting this up for the company or team you're working for, you should consider creating a \"bot\" user that is owned by the company or team. Then invite that user to the repository and create an access token with it. This way the access token isn't tied to your personal account. Head over to Github, specifically to the Personal access tokens settings page which can be access directly with https://github.com/settings/tokens . There click Generate new token . Enter a title for your token, then give the token access for the repo scope. Then click Generate token . Now you'll be presented with your token. Copy this token and save it somewhere , because you won't be able to view it again. If you lose the token you have to create a new one. Add Github credentials in Jenkins Now you have to add this access token in Jenkins, so start by going do your dashboard and click Credentials . Continue on by clicking (global) . Now go to Add Credentials . Everything should now be preset, but make sure all dropdowns match the ones on this image and enter the Github username in Username , and add the access token as Password . Then click OK . Slack integration If you chose a Slack channel to send notifications to when generating files for your application, you need to set up the integration for it. Start by setting up an integration for your Slack channel by visiting https://<your-slack-subdomain>.slack.com/apps . Here you search for jenkins and click the Jenkins CI integration. Continue by clicking Install . Chose which channel to post notifications to, even though your application configuration will override this setting. Then click Add Jenkins CI integration Now you'll be presented with the installation instructions for the integration. Scrolling down to Step 3 you'll find your Base URL and Integration Token . Copy these or leave the page up for later reference. Setup build project Now it's only a matter of creating a build project in Jenkins to start using CI! Head to the Jenkins dashboard and click New Item . Give your build project a title and select Multibranch Pipeline as the type for it and continue by clicking OK . Now under Branch Sources , click Add source and select Git . Add your repository in the format git@github.com:<owner>/<name>.git . Now add the credentials you've previously created by using the dropdown and selecting it. Now hit Save and you're done. Jenkins will now build all your branches and your pull requests!","title":"Configure Jenkins"},{"location":"configure-jenkins/#path-environment-variable","text":"Jenkins will need to be able to execute the different tools we install through Composer to run static analysis on your code, we need to tell it where to find these binaries. In the Jenkins web interface click \"Manage Jenkins\" in the left sidebar menu. Then go to \"Configure System\". Here you'll find Global Properties , then click the checkbox next to Environment Variables and click Add . In Name you enter PATH and in Value you enter $PATH:vendor/bin:/var/lib/jenkins/.composer/vendor/bin . Then hit Save .","title":"PATH environment variable"},{"location":"configure-jenkins/#github-authorization","text":"","title":"Github authorization"},{"location":"configure-jenkins/#create-deploy-key","text":"For private repositories only This step is not necessary if you will be building a project from a public repository. We'll generate an SSH key for the jenkins user on the server. So in your terminal write the following command and follow the instructions: sudo su - jenkins -c \"ssh-keygen\" Then output the public key and copy it for adding it on Github for your repository: sudo su - jenkins -c \"cat ~/.ssh/id_rsa.pub\" Then head over to Github, specifically to the Deploy keys settings page for your repository which can be access directly with https://github.com/<owner>/<name>/settings/keys . Now click Add deploy key . Enter a title for your key and then paste the public key in the textarea, then click Add key .","title":"Create deploy key"},{"location":"configure-jenkins/#add-host-key-verification","text":"We need to say we trust Github's domain, since Jenkins can't perform this on its own. sudo su - jenkins -c \"ssh-keyscan -t rsa github.com >> ~/.ssh/known_hosts\"","title":"Add host key verification"},{"location":"configure-jenkins/#create-access-token","text":"Working in a team? If you're setting this up for the company or team you're working for, you should consider creating a \"bot\" user that is owned by the company or team. Then invite that user to the repository and create an access token with it. This way the access token isn't tied to your personal account. Head over to Github, specifically to the Personal access tokens settings page which can be access directly with https://github.com/settings/tokens . There click Generate new token . Enter a title for your token, then give the token access for the repo scope. Then click Generate token . Now you'll be presented with your token. Copy this token and save it somewhere , because you won't be able to view it again. If you lose the token you have to create a new one.","title":"Create access token"},{"location":"configure-jenkins/#add-github-credentials-in-jenkins","text":"Now you have to add this access token in Jenkins, so start by going do your dashboard and click Credentials . Continue on by clicking (global) . Now go to Add Credentials . Everything should now be preset, but make sure all dropdowns match the ones on this image and enter the Github username in Username , and add the access token as Password . Then click OK .","title":"Add Github credentials in Jenkins"},{"location":"configure-jenkins/#slack-integration","text":"If you chose a Slack channel to send notifications to when generating files for your application, you need to set up the integration for it. Start by setting up an integration for your Slack channel by visiting https://<your-slack-subdomain>.slack.com/apps . Here you search for jenkins and click the Jenkins CI integration. Continue by clicking Install . Chose which channel to post notifications to, even though your application configuration will override this setting. Then click Add Jenkins CI integration Now you'll be presented with the installation instructions for the integration. Scrolling down to Step 3 you'll find your Base URL and Integration Token . Copy these or leave the page up for later reference.","title":"Slack integration"},{"location":"configure-jenkins/#setup-build-project","text":"Now it's only a matter of creating a build project in Jenkins to start using CI! Head to the Jenkins dashboard and click New Item . Give your build project a title and select Multibranch Pipeline as the type for it and continue by clicking OK . Now under Branch Sources , click Add source and select Git . Add your repository in the format git@github.com:<owner>/<name>.git . Now add the credentials you've previously created by using the dropdown and selecting it. Now hit Save and you're done. Jenkins will now build all your branches and your pull requests!","title":"Setup build project"},{"location":"install-jenkins/","text":"Run the installation script Run it using: sh jenkins-install.sh When prompted about Java information, press Enter to continue. After installation is complete, you'll see the IP address Jenkins is available at and a admin account to login with. ########################################## # INSTALLATION COMPLETE # ########################################## Jenkins should be available at http://<ip>:8080 Login with: admin / <generated password> Installed software Curl Unzip Java 8 Jenkins, with plugins pipeline-model-definition pipeline-stage-view slack checkstyle cloverphp crap4j dry htmlpublisher pmd violations warnings xunit git greenballs PHP, with extension php-cli php-xdebug php-xsl php-dom php-zip php-mbstring Composer Global PHP packages phpunit/phpunit squizlabs/php_codesniffer phpmd/phpmd sebastian/phpcpd jakub-onderka/php-parallel-lint Additional PHP extensions If your application requires other extensions than the default ones provided, simply install them yourself. If you wanted to install the curl and gd extensions for example, replace the version with the PHP version you chose: sudo apt-get install -y php7.2-curl php7.2-gd First login Navigate to the URL provided by the installer script. You'll be presented with this screen where you enter the provided admin password: After logging in you'll be given the option to install plugins. Since the installer already have installed the plugins you need, just press the X in the top right corner to continue. Then simply click Start using Jenkins . White screen? If you get just a white page of nothing after you do this, restart the Jenkins service by running: sudo service jenkins restart Then refresh the page. You'll now be met by Jenkins start page.","title":"Install Jenkins"},{"location":"install-jenkins/#run-the-installation-script","text":"Run it using: sh jenkins-install.sh When prompted about Java information, press Enter to continue. After installation is complete, you'll see the IP address Jenkins is available at and a admin account to login with. ########################################## # INSTALLATION COMPLETE # ########################################## Jenkins should be available at http://<ip>:8080 Login with: admin / <generated password>","title":"Run the installation script"},{"location":"install-jenkins/#installed-software","text":"Curl Unzip Java 8 Jenkins, with plugins pipeline-model-definition pipeline-stage-view slack checkstyle cloverphp crap4j dry htmlpublisher pmd violations warnings xunit git greenballs PHP, with extension php-cli php-xdebug php-xsl php-dom php-zip php-mbstring Composer Global PHP packages phpunit/phpunit squizlabs/php_codesniffer phpmd/phpmd sebastian/phpcpd jakub-onderka/php-parallel-lint Additional PHP extensions If your application requires other extensions than the default ones provided, simply install them yourself. If you wanted to install the curl and gd extensions for example, replace the version with the PHP version you chose: sudo apt-get install -y php7.2-curl php7.2-gd","title":"Installed software"},{"location":"install-jenkins/#first-login","text":"Navigate to the URL provided by the installer script. You'll be presented with this screen where you enter the provided admin password: After logging in you'll be given the option to install plugins. Since the installer already have installed the plugins you need, just press the X in the top right corner to continue. Then simply click Start using Jenkins . White screen? If you get just a white page of nothing after you do this, restart the Jenkins service by running: sudo service jenkins restart Then refresh the page. You'll now be met by Jenkins start page.","title":"First login"},{"location":"setup-application/","text":"Install Jeeves and generate configuration Add it to your dependencies with composer require --dev modess/jeeves Now run it to generate the files for your project. ./vendor/bin/jeeves generate Install additional PHP packages If you want more control over the tools and versions of them you're running, add them to your projects' dependencies. Otherwise they'll be installed globally on your Jenkins server. phpunit/phpunit : Run unit tests and generate code coverage squizlabs/php_codesniffer : Checking that code styles follows a standard phpmd/phpmd : Check code complexity sebastian/phpcpd : Check for code duplication jakub-onderka/php-parallel-lint : Fast PHP linting in parallel PHPUnit configuration file You need to manually add a configuration file for PHPUnit with code coverage. How that looks depends on your application, here are some examples: Generic PHP application Laravel application Save it as phpunit.xml.dist in your project and add phpunit.xml to your .gitignore file so you can override it. If you change the build directory when generating the files for your project, update the file accordingly. Commit the files to your repository and push them to your remote.","title":"Setup application"},{"location":"setup-application/#install-jeeves-and-generate-configuration","text":"Add it to your dependencies with composer require --dev modess/jeeves Now run it to generate the files for your project. ./vendor/bin/jeeves generate","title":"Install Jeeves and generate configuration"},{"location":"setup-application/#install-additional-php-packages","text":"If you want more control over the tools and versions of them you're running, add them to your projects' dependencies. Otherwise they'll be installed globally on your Jenkins server. phpunit/phpunit : Run unit tests and generate code coverage squizlabs/php_codesniffer : Checking that code styles follows a standard phpmd/phpmd : Check code complexity sebastian/phpcpd : Check for code duplication jakub-onderka/php-parallel-lint : Fast PHP linting in parallel","title":"Install additional PHP packages"},{"location":"setup-application/#phpunit-configuration-file","text":"You need to manually add a configuration file for PHPUnit with code coverage. How that looks depends on your application, here are some examples: Generic PHP application Laravel application Save it as phpunit.xml.dist in your project and add phpunit.xml to your .gitignore file so you can override it. If you change the build directory when generating the files for your project, update the file accordingly. Commit the files to your repository and push them to your remote.","title":"PHPUnit configuration file"}]}